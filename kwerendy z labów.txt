CREATE TABLE postac(id_postaci INT AUTO_INCREMENT, nazwa VARCHAR(40), rodzaj ¬-ENUM('wiking','ptak','kobieta'), data_ur DATE, wiek INT UNSIGNED, PRIMARY KEY(id_postaci));

INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES('Bjorn','wiking','1657-10-28',35);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES('Drozd','ptak','1843-05-12',200);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES('Tesciowa','kobieta','1630-10-28',69);

UPDATE postac SET wiek = 88 WHERE nazwa = 'Tesciowa';

CREATE TABLE walizka(id_walizki INT AUTO_INCREMENT, pojemnosc INT UNSIGNED, kolor ENUM('rozowy','czerwony','teczowy','zolty'), id_wlasciciela INT, PRIMARY KEY(id_walizki), FOREIGN KEY(id_wlasciciela) REFERENCES postac(id_postaci)
ON DELETE CASCADE);


ALTER TABLE walizka MODIFY COLUMN kolor ENUM('rozowy','czerwony','teczowy','zolty') DEFAULT 'rozowy';

INSERT INTO walizka(pojemnosc,kolor,id_wlasciciela) VALUES (500,'teczowy',3);

INSERT INTO walizka(pojemnosc,kolor,id_wlasciciela) VALUES (500,'teczowy',1);

CREATE TABLE izba(adres_budynku VARCHAR(50) NOT NULL, nazwa_izby VARCHAR(50) NOT NULL, metraz INT UNSIGNED, wlasciciel INT, PRIMARY KEY(adres_budynku, nazwa_izby), FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci) ON DELETE SET NULL);

ALTER TABLE izba ADD kolor_izby VARCHAR(50) DEFAULT 'czarny' AFTER metraz;

INSERT INTO izba VALUES ('Wiejska 13','spizarnia',1000,'rozowy',1);	


CREATE TABLE przetwory(id_przetworu INT NOT NULL, rok_produkcji SMALLINT UNSIGNED DEFAULT '1654', id_wykonawcy INT, zawartosc VARCHAR(100), dodatek VARCHAR(50) DEFAULT 'papryczka chilli', id_konsumenta INT, PRIMARY KEY(id_przetworu), FOREIGN KEY (id_wykonawcy) REFERENCES postac(id_postaci), FOREIGN KEY (id_konsumenta) REFERENCES postac(id_postaci));

INSERT INTO przetwory(id_przetworu, id_wykonawcy, zawartosc, id_konsumenta) VALUES (1,1,'bigos',3);

INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES ('ragnar',wiking','1989-11-11',30);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES ('ivor','wiking','1989-09-10',20);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES ('hubbe','wiking','1960-09-10',50);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES ('erling','wiking','1970-04-20',34);
INSERT INTO postac(nazwa,rodzaj,data_ur,wiek) VALUES ('floki','wiking','1999-01-29',19);

CREATE TABLE statek(nazwa_statku VARCHAR(50) NOT NULL, rodzaj_statku ENUM('galera','zaglowka','motorowka'), data_wodowania DATE, max_ladownosc INT UNSIGNED, PRIMARY KEY(nazwa_statku));


INSERT INTO statek VALUES('kruk odyna', 'galera','1930-10-11',1990000);
INSERT INTO statek VALUES('plonacy drozd', 'zaglowka','1960-11-20',1000);

ALTER TABLE postac ADD funkcja VARCHAR(70);

UPDATE postac SET funkcja = 'kapitan' WHERE nazwa = 'Bjorn';

ALTER TABLE postac ADD nazwa_statku VARCHAR(70);

ALTER TABLE postac ADD FOREIGN KEY(nazwa_statku) REFERENCES statek(nazwa_statku);


UPDATE postac SET funkcja = 'zaloga', nazwa_statku='czarna drozda' WHERE rodzaj='wiking';


DELETE FROM postac WHERE rodzaj=’wiking’ and wiek>’47’;

#lub 

DELETE FROM postac WHERE rodzaj='wiking' ORDER BY wiek ASC limit 2;



  ALTER TABLE postac drop CONSTrAINT postac_ibfk_1;
  ALTER table przetwory DROP constraint przetwory_ibfk_2;
  ALTER table przetwory DROP constraint przetwory_ibfk_1;
  ALTER table walizka DROP constraint walizka_ibfk_1;
  ALTER TABLE izba drop constraint izba_ibfk_1;
      ALTER TABLE postac drop id_postaci;
      
      #lub 
      SET foreign_key_checks = 0;
     alter table postac drop id_postaci



  ALTER table postac ADD pesel char(11);
  ALTER table postac ADD primary key(pesel).
  
  ALTER table postac MODIFY COLUMN enum('wiking','ptak','kobieta','syrena');
   
   INSERT INTO postac(nazwa,rodzaj,data_ur,wiek,pesel) 
  VALUES('Gertruda Nieszczera','syrena','1966-02-04',30,'28572857298');
  
  
   update postac set czlonek_zalogi = 'kruk odyna' where nazwa like '%a%';
   
   #dałem 16 wiek bo nie chciało mi sie już zmieniać daty na 20 wiek.
   
   update statek set max_ladownosc=max_ladownosc * 0.7 where data_wodowania > '1600-01-01';
    
    alter table postac add check(wiek<=1000);
   
   
   
   
  
   
  

   ALTER table postac MODIFY COLUMN enum('wiking','ptak','kobieta','syrena','waz');
  
    Insert into postac(nazwa,rodzaj,data_ur,wiek,pesel)  VALUES ('Waz Loco','waz','1800-11-18',120,'12334578901');
    
    
    #1 opcja
    
    CREATE TABLE marynarz LIKE postac;
    
   #INSERT INTO marynarz SELECT...FROM postac;
   
    #2 opcja
    
    #CREATE TABLE marynarz SELECT * FROM postac WHERE...;
    
    
    SELECT * from postac where czlonek_zalogi is not null;
    
    INSERT INTO marynarz SELECT * from postac where czlonek_zalogi is not null; 
  
  
  alter table marynarz add foreign key(czlonek_zalogi) references statek(nazwa_statku);
  
  
   update postac set czlonek_zalogi=null;
 update marynarz set czlonek_zalogi=null;
 
 DELETE from postac where nazwa=('floki');
  DELETE from marynarz where nazwa=('floki');



  ALTER TABLE marynarz drop CONSTrAINT marynarz_ibfk_1;
  
  drop table statek;
  
  
  
   CREATE TABLE zwierz (id_zwierza int auto_increment, nazwa varchar(80),wiek int, PRIMARY KEY(id_zwierza));

  insert into zwierz (nazwa,wiek) select nazwa,wiek from postac  where rodzaj in ('ptak','waz');

                                                          
                                                                    #LAB 5
                                                                    
CREATE table kreatura  SELECT * from wikingowie.kreatura;
CREATE table zasob SELECT * from wikingowie.zasob;    
CREATE table ekwipunek SELECT * from wikingowie.ekwipunek;


SELECT * from kreatura WHERE NOT rodzaj='wiedzma' AND udzwig > 50 or udzwig = 50;



SELECT * from zasob WHERE waga >= 2 and waga <=5;
SELECT * from kreatura WHERE waga between 2 and 5;





SELECT * from kreatura WHERE nazwa like '%or%' AND UDZWIG BETWEEN 30 and 100;





SELECT * from zasob  where month(dataPozyskania) = 7 AND month(dataPozyskania) = 8;



select * from zasob ORDER BY waga ASC;


SELECT * FROM kreatura ORDER BY dataUr DESC limit 5;
                                     


SELECT DISTINCT rodzaj from zasob;


SELECT CONCAT("nazywam sie ",nazwa, " i mój wiek to ", wiek) from postac;

SELECT CONCAT( nazwa,  rodzaj) from kreatura where rodzaj like 'wi%';


SELECT * from zasob;

SELECT nazwa,ilosc*waga AS waga_calkowita FROM zasob WHERE dataPozyskania >= '2000-01-01' AND dataPozyskania <= '2007-12-30';

SELECT nazwa,ilosc*waga AS waga_calkowita FROM zasob WHERE year(dataPozyskania) between 2000 and 2007;

SELECT nazwa,(ilosc*waga)*0.7 AS 'masa wlasciwa jedzenia', (ilosc*waga)*0.3 AS 'waga odpadkow' from zasob WHERE rodzaj='jedzenie';

SELECT * from zasob where rodzaj is null;

SELECT * from zasob;
SELECT DISTINCT (rodzaj) from zasob WHERE  nazwa like 'Ba%' OR nazwa like '%os' ORDER BY rodzaj ASC;






                                                                    #LAB6

. wyświetl średnią wagę wszystkich wikingów

SELECT avg(waga) from kreatura where rodzaj='wiking';

Wyświetl średnią wagę oraz liczbę kreatur dla każdego rodzaju 

SELECT avg(waga), count(*) from kreatura group by rodzaj;


wyświetl średni wiek dla każdego rodzaju kreatury

SELECT avg(year(now())-year(dataUr)) from kreatura gropup by rodzaj;

SELECT sum(waga) from zasob group by rodzaj;

SELECT avg(waga) from zasob group by nazwa having avg(waga)>=4 and sum(waga)>10; 

SELECT rodzaj,count(distinct(nazwa)) from zadob GROUP BY rodzaj having


                                                ZADANIE 3

#złączanie wewn(czesc wspolna)

1.metoda

select * from ekwipunek as k , ekwpiunek e where k.idkreatury=e.idkreatury;  

select * from kreatura k inner join ekwpiunek e on k.idkreatury=e.idkreatury;


3.1

. Wyświetlić dla każdej kreatury ilości zasobów jakie niesie.

SELECT nazwa,ilosc FROM  kreatura k INNER JOIN ekwipunek e ON k.idKreatury=e.ilosc;

3.2
 Wyświetlić dla każdej kreatury nazwy zasobów jakie posiada.
 
SELECT kreatura.nazwa,zasob.nazwa FROM kreatura  
 inner join ekwipunek   ON (kreatura.idKreatury=ekwipunek.idKreatury)
 inner join zasob   ON (ekwipunek.idZasobu=zasob.idZasobu);
 
 
 SELECT k.nazwa,z.nazwa FROM kreatura  k
 inner join ekwipunek  e ON (k.idKreatury=e.idKreatury)
 inner join zasob  z ON (e.idZasobu=z.idZasobu);
 
 
 
 
 3.3
 
 . Wyświetlić kreatury, które nie posiadają żadnego ekwipunku.

 
  SELECT * from kreatura k left join ekwipunek e on k.idkreatury=e.idkreatury is null;
  
  
                                          
                                          ZADANIE 4
  
  
  
  4.1
  
  Wyświetlić nazwy wikingów, którzy urodzili się w latach 70-tych XVII wieku oraz nazwy 
zasobów, które posiadają (użyj natural joina jeśli się da).

 SELECT k.nazwa, zasob.nazwa FROM kreatura k NATURAL JOIN ekwipunek e INNER JOIN zasob on e.idZasobu=zasob.idZasobu   
 where year(dataUr) between 1670 and 1679 order by k.nazwa ;

4.2

Wyświetlić nazwy 5 najmłodszych kreatur, które w ekwipunku posiadają jedzenie

 select kreatura.nazwa,zasob.nazwa FROM kreatura natural join ekwipunek inner join zasob on ekwipunek.idZasobu=zasob.idZasobu 
 where zasob.rodzaj='jedzenie' limit 5;



4.3
Wypisz obok siebie nazwy kreatur, których numer idKreatury różni się o 5 (np. Bjorn - Astrid, 
Brutal - Ibra itd.).

SELECT k1.nazwa,k2.nazwa FROM kreatura k1 INNER JOIN kreatura k2 on (k1.idKreatury+5=k2.idKreatury);



                                                      ZADANIE 5
                                                      
                                                      
5.1

Dla każdego rodzaju kreatury wyświetlić średnią wagę zasobów, jaką posiadają w ekwipunku, 
jeśli kreatura nie jest małpą ani wężem i ilość ekwipunku jest poniżej 30.


SELECT kreatura.rodzaj,avg(zasob.waga*ekwipunek.ilosc) AS srednia from kreatura INNER JOIN ekwipunek ON (kreatura.idKreatury=ekwipunek.idKreatury)
INNER JOIN zasob ON (ekwipunek.idZasobu=zasob.idZasobu) WHERE kreatura.rodzaj!='malpa' OR kreatura.rodzaj!='waz' 
GROUP by rodzaj having sum(ekwipunek.ilosc)<30;


5.2

Dla każdego rodzaju kreatury wyświetlić nazwę, datę urodzenia i rodzaj najmłodszej i 
najstarszej kreatury


SELECT kreatura.nazwa,kreatura.rodzaj,kreatura.dataUr FROM kreatura ,(SELECT min(dataUr) AS min,max(dataUr) AS max from kreatura group by rodzaj) e2 
WHERE dataUr = min OR dataUr=max;



////////////////// LAB 7 /////////////////////////

                    ZADANIE 1

1.1


 Create table uczestnicy SELECT * from wikingowie.uczestnicy;
 Create table etapy_wyprawy SELECT * from wikingowie.etapy_wyprawy;
 Create table sektor SELECT * from wikingowie.sektor;c
 Create table wyprawa select * from wikingowie.wyprawa;
 
 
 
 1.2
 
 
  SELECT k.nazwa from kreatura as k left join uczestnicy as u on k.idKreatury=u.id_uczestnika where id_uczestnika is null;
  
  
  
  1.3
  
   select w.nazwa, sum(e.ilosc) from wyprawa as w inner join uczestnicy as u on (u.id_wyprawy=w.id_wyprawy) 
 inner join ekwipunek as e on (u.id_uczestnika=e.idKreatury) group by w.nazwa; 






                                  ZADANIE 2


2.1

select w.nazwa,count(u.id_uczestnika), group_concat(k.nazwa) from wyprawa as w 
 inner join uczestnicy as u on (u.id_wyprawy=w.id_wyprawy) inner join kreatura as k on (k.idKreatury=u.id_uczestnika) group by w.id_wyprawy;






                                                        ZADANIE 3
             


#przyklad select rodzaj from kreatura; 
#select ifnull(rodzaj,"brak rodzaju") from kreatura
#2 wersja
select if(rodzaj is null,"brak rodzaju",rodzaj)from kreatura;





3.1
SELECT ifnull(count(etapy_wyprawy.sektor),0) AS ilosc_odwiedzin, sektor.nazwa FROM sektor LEFT JOIN etapy_wyprawy ON (etapy_wyprawy.sektor=sektor.id_sektora) GROUP BY sektor.id_sektora;





3.2

SELECT kreatura.nazwa, 
IF(COUNT(uczestnicy.id_wyprawy)>0,"brał udział w wyprawie","nie brał udziału w wyprawie") AS czyBralUdzial
FROM kreatura
LEFT JOIN uczestnicy 
ON kreatura.idKreatury = uczestnicy.id_uczestnika
GROUP BY kreatura.idKreatury;




                                  
                                  
                                  
                                            ZADANIE 4
              
4.1

Select wyprawa.nazwa, sum(length(etapy_wyprawy.dziennik)) as liczba_znakow from wyprawa inner join etapy_wyprawy on idEtapu=idwyprawy group by wyprawa.nazwa having sum(length(etapy_wyprawy.dziennik))<400;




4.2



SELECT wyprawa.nazwa, SUM(zasob.waga*ekwipunek.ilosc)/COUNT(DISTINCT(uczestnicy.id_uczestnika)) FROM uczestnicy INNER JOIN wyprawa ON (uczestnicy.id_wyprawy=wyprawa.id_wyprawy) INNER JOIN kreatura ON (kreatura.idKreatury=uczestnicy.id_uczestnika) INNER JOIN ekwipunek ON (ekwipunek.idKreatury=kreatura.idKreatury) INNER JOIN zasob ON (ekwipunek.idZasobu=zasob.idZasobu) GROUP BY uczestnicy.id_wyprawy ORDER BY wyprawa.id_wyprawy;






                                                  ZADANIE 5
                                                  
 5.1 

SELECT k.nazwa,
w.nazwa,
DATEDIFF(w.data_rozpoczecia, k.dataUr) as 'Wiek w dniach'
FROM kreatura k,
etapy_wyprawy ew,
wyprawa w,
sektor s,
uczestnicy u
WHERE ew.sektor = s.id_sektora
and k.idKreatury=u.id_uczestnika
and u.id_wyprawy=w.id_wyprawy
AND ew.idWyprawy = w.id_wyprawy
AND s.nazwa = "Chatka dziadka";













#1
SELECT imie,nazwisko,dzial.nazwa FROM pracownik INNER JOIN dzial ON pracownik.dzial=dzial.id_dzialu;



#2 Wyświetl nazwę towaru, nazwę kategorii oraz ilość towaru i posortuj dane po kolumnie ilość malejąco.


SELECT nazwa_towaru,kategoria.nazwa_kategori,stan_magazynowy.ilosc FROM towar INNER JOIN kategoria ON towar.kategoria=kategoria.id_kategori
INNER JOIN stan_magazynowy ON towar.id_towaru=stan_magazynowy.towar ORDER BY stan_magazynowy.ilosc DESC;

#3 Wyświetl wszystkie anulowane zamówienia.

SELECT * from status_zamowienia WHERE nazwa_statusu_zamowienia LIKE "anulowane";


#4 Wyświetl wszystkich klientów, których adres podstawowy znajduje się w miejscowości Olsztyn.

SELECT pelna_nazwa, adres_klienta.miejscowosc FROM klient INNER JOIN adres_klienta ON klient.id_klienta=adres_klienta.klient 
INNER JOIN typ_adresu ON adres_klienta.typ_adresu=typ_adresu.id_typu WHERE adres_klienta.miejscowosc="Olsztyn" AND typ_adresu.nazwa="podstawowy";


#5 Wyświetl wszystkie nazwy jednostek miary, które nie zostały nigdy wykorzystane w tabeli stan_magazynowy.

SELECT sm.jm,jm.id_jednostki FROM jednostka_miary jm left join stan_magazynowy sm on sm.jm=jm.id_jednostki WHERE sm.jm is null;


#6 Wyświetl numer zamówienia, nazwę towaru, ilosc i cenę dla zamówień złożonych w 2018 roku.

SELECT zamowienie.numer_zamowienia,towar.nazwa_towaru,pozycja_zamowienia.ilosc,pozycja_zamowienia.cena FROM zamowienie 
INNER JOIN pozycja_zamowienia ON zamowienie.id_zamowienia=pozycja_zamowienia.zamowienie INNER JOIN towar ON pozycja_zamowienia.towar=towar.id_towaru
WHERE year(data_zamowienia)=2018;

#7 Stwórz nową tabelę o nazwie towary_full_info, w której znajdą się kolumny nazwa_towaru, cena_zakupu, kategoria(nazwa),ilosc , jednostka miary(nazwa).


CREATE TABLE gorczynskim.towary_full_info AS
SELECT towar.nazwa_towaru,towar.cena_zakupu,kategoria.nazwa_kategori,stan_magazynowy.ilosc,jednostka_miary.nazwa FROM towar INNER JOIN kategoria ON towar.kategoria=kategoria.id_kategori
INNER JOIN stan_magazynowy ON towar.id_towaru=stan_magazynowy.towar INNER JOIN jednostka_miary ON jednostka_miary.id_jednostki=stan_magazynowy.jm;

#8 Wyświetl pozycje zamówień dla 5 najstarszych zamówień.

SELECT pozycja_zamowienia.* from pozycja_zamowienia inner join( select id_zamowienia from zamowienie order by data_zamowienia asc limit 5) as t 
on pozycja_zamowienia.zamowienie=t.id_zamowienia;


#9 Wyświetl wszystkie zamówienia, które mają status inny niż zrealizowane.

SELECT zamowienie.numer_zamowienia,status_zamowienia.nazwa_statusu_zamowienia from zamowienie INNER JOIN status_zamowienia ON zamowienie.status_zamowienia=status_zamowienia.id_statusu_zamowienia
 WHERE status_zamowienia.nazwa_statusu_zamowienia != 'zrealizowane';


#10 Wyświetl wszystkie adresy, których kod został niepoprawnie zapisany.

SELECT * FROM adres_klienta WHERE kod NOT REGEXP "[0-9]{2}-[0-9]{3}";

















#1
select nazwisko from pracownik order by nazwisko asc;
#2
select imie, nazwisko, pensja from pracownik where YEAR(data_urodzenia)>1979;
#3
select pensja from pracownik where pensja between 3500 AND 5000;
#4
select towar from stan_magazynowy where ilosc > 10;
#5
select nazwa_towaru from towar where nazwa_towaru like "A%" or nazwa_towaru like "B%" or nazwa_towaru like "C%";

#6
select pelna_nazwa from klient where czy_firma =0;
#7
select * from zamowienie order by data_zamowienia DESC limit 10;
#8
select imie, nazwisko from pracownik order by pensja ASC limit 5;
#9
select * from towar where nazwa_towaru not like "%a%" order by cena_zakupu desc limit 10;




#3
SELECT dzial.nazwa, COUNT(pracownik.id_pracownika) FROM dzial INNER JOIN pracownik ON dzial.id_dzialu=pracownik.dzial GROUP BY dzial.nazwa;
#4
SELECT nazwa_kategori, COUNT(towar.id_towaru) FROM kategoria INNER JOIN towar ON kategoria.id_kategori=towar.kategoria GROUP BY id_kategori; 
#5
select nazwa_kategori ,group_concat(nazwa_towaru) from kategoria k inner join towar t on k.id_kategori=t.kategoria group by kategoria;
#6
select Round(AVG(pensja),'2') from pracownik;
#7
select AVG(pensja) from pracownik where YEAR(CURDATE())-YEAR(data_zatrudnienia)>=5;
#8
select nazwa_towaru,SUM(ilosc) from towar t inner join  pozycja_zamowienia p  on t.id_towaru=p.towar group by id_towaru order by SUM(ilosc) DESC LIMIT 10;
#9
select numer_zamowienia,SUM(ilosc*cena) from zamowienie z inner join pozycja_zamowienia p on z.id_zamowienia=p.zamowienie where YEAR(data_zamowienia)=2017 and Month(data_zamowienia) Between 1 and 3 group by id_zamowienia;
#10
select imie ,nazwisko ,Sum(ilosc*cena) from pracownik p inner join zamowienie z  on p.id_pracownika=z.pracownik_id_pracownika inner join pozycja_zamowienia pz on z.id_zamowienia=pz.zamowienie group by id_pracownika  order by Sum(ilosc*cena) 



#1.Wyświetl nazwę działu i minimalną, maksymalną i średnią wartość pensji w każdym dziale.


SELECT dzial.nazwa,max(pracownik.pensja),min(pracownik.pensja),avg(pracownik.pensja) FROM dzial INNER JOIN pracownik ON dzial.id_dzialu = pracownik.dzial GROUP by dzial.nazwa;

#2. Wyświetl pełną nazwę klienta, wartość zamówienia dla 10 najwyższych wartości zamówienia.


SELECT klient.pelna_nazwa,sum(ilosc*cena) AS wartosc FROM klient INNER JOIN zamowienie ON klient.id_klienta=zamowienie.klient
INNER JOIN pozycja_zamowienia ON zamowienie.id_zamowienia=pozycja_zamowienia.zamowienie GROUP BY klient.id_klienta ORDER BY wartosc DESC limit 10;

#3.Wyświetl wartość przychodu dla każdego roku. Dane posortuj malejąco według sumy wartości zamówień.


SELECT year(data_zamowienia),sum(pozycja_zamowienia.cena*pozycja_zamowienia.ilosc) as suma FROM pozycja_zamowienia 
INNER JOIN zamowienie ON pozycja_zamowienia.zamowienie=zamowienie.id_zamowienia
INNER JOIN  status_zamowienia ON status_zamowienia.id_statusu_zamowienia=zamowienie.status_zamowienia WHERE status_zamowienia.nazwa_statusu_zamowienia="zrealizowane" GROUP BY year(data_zamowienia) ORDER BY suma DESC;

#4.Wyświetl sumę wartości wszystkich anulowanych zamówień.


SELECT sum(pozycja_zamowienia.cena*pozycja_zamowienia.ilosc) as suma FROM pozycja_zamowienia INNER JOIN zamowienie ON pozycja_zamowienia.zamowienie=zamowienie.id_zamowienia
INNER JOIN status_zamowienia ON status_zamowienia.id_statusu_zamowienia=zamowienie.status_zamowienia WHERE status_zamowienia.nazwa_statusu_zamowienia="anulowane";

#5.Wyświetl liczbę zamówień i sumę zamówień dla każdego miasta z podstawowego adresu klientów.


SELECT adres_klienta.miejscowosc,count(*),SUM(pozycja_zamowienia.ilosc*pozycja_zamowienia.cena) FROM zamowienie 
INNER JOIN pozycja_zamowienia ON pozycja_zamowienia.zamowienie=zamowienie.id_zamowienia
INNER JOIN klient ON zamowienie.klient=klient.id_klienta
INNER JOIN adres_klienta ON klient.id_klienta=adres_klienta.klient 
INNER JOIN typ_adresu ON adres_klienta.typ_adresu=typ_adresu.id_typu
WHERE typ_adresu.nazwa="podstawowy"
GROUP BY adres_klienta.miejscowosc;

#6.Wyświetl dotychczasowy dochód firmy biorąc pod uwagę tylko zamówienia zrealizowane.


SELECT sum((pozycja_zamowienia.cena-towar.cena_zakupu)*pozycja_zamowienia.ilosc) as suma FROM pozycja_zamowienia 
INNER JOIN zamowienie ON pozycja_zamowienia.zamowienie=zamowienie.id_zamowienia
INNER JOIN towar ON pozycja_zamowienia.towar=towar.id_towaru
INNER JOIN  status_zamowienia ON status_zamowienia.id_statusu_zamowienia=zamowienie.status_zamowienia WHERE status_zamowienia.nazwa_statusu_zamowienia="zrealizowane";

#7.Policz i wyświetl dochód (przychód z zamówień i cena zakupu towaru) w każdym roku działalności firmy


SELECT year(zamowienie.data_zamowienia),sum((pozycja_zamowienia.cena-towar.cena_zakupu)*pozycja_zamowienia.ilosc) as suma FROM pozycja_zamowienia 
INNER JOIN zamowienie ON pozycja_zamowienia.zamowienie=zamowienie.id_zamowienia
INNER JOIN towar ON pozycja_zamowienia.towar=towar.id_towaru
INNER JOIN  status_zamowienia ON status_zamowienia.id_statusu_zamowienia=zamowienie.status_zamowienia WHERE status_zamowienia.nazwa_statusu_zamowienia="zrealizowane" GROUP BY year(zamowienie.data_zamowienia);
#8. Wyświetl wartość aktualnego stanu magazynowego z podziałem na kategorię produktów.


SELECT kategoria,SUM(towar.cena_zakupu*stan_magazynowy.ilosc) FROM towar 
INNER JOIN stan_magazynowy ON towar.id_towaru=stan_magazynowy.towar GROUP BY towar.kategoria;

#9.Przygotuj zapytanie, które wyświetli dane w poniższej postaci (policz ilu pracowników urodziło się w danym miesiącu - uwaga na porządek sortowania).


SELECT monthname(data_urodzenia),count(id_pracownika) from pracownik GROUP BY month(data_urodzenia) ORDER BY month(data_urodzenia);
#10.


SELECT pracownik.imie,pracownik.nazwisko, TIMESTAMPDIFF(MONTH,data_zatrudnienia,CURDATE()) * pracownik.pensja AS koszt FROM pracownik AS pracownik;




